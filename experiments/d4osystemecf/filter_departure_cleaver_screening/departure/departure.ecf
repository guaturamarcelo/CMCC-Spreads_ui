%include <includes/head.h>


# ==============================================================================
# Block 7: Actually run the assimilation.
#
# DART namelist settings required:
# &filter_nml
#    adv_ens_command         = "no_CESM_advance_script",
#    obs_sequence_in_name    = 'obs_seq.out'
#    obs_sequence_out_name   = 'obs_seq.final'
#    single_file_in          = .false.,
#    single_file_out         = .false.,
#    stages_to_write         = stages you want + ,'output'
#    input_state_file_list   = 'cam_init_files'
#    output_state_file_list  = 'cam_init_files',
#
# WARNING: the default mode of this script assumes that
#          input_state_file_list = output_state_file_list, so that
#          the CAM initial files used as input to filter will be overwritten.
#          The input model states can be preserved by requesting that stage
#          'forecast' be output.
#
# ==============================================================================

# In the default mode of CAM assimilations, filter gets the model state(s)
# from CAM initial files.  This section puts the names of those files into a text file.
# The name of the text file is provided to filter in filter_nml:input_state_file_list.

# NOTE:
# If the files in input_state_file_list are CESM initial files (all vars and
# all meta data), then they will end up with a different structure than
# the non-'output', stage output written by filter ('preassim', 'postassim', etc.).
# This can be prevented (at the cost of more disk space) by copying
# the CESM format initial files into the names filter will use for preassim, etc.:
#    > cp $case.cam_0001.i.$date.nc  preassim_member_0001.nc.
#    > ... for all members
# Filter will replace the state variables in preassim_member* with updated versions,
# but leave the other variables and all metadata unchanged.

# If filter will create an ensemble from a single state,
#    filter_nml: perturb_from_single_instance = .true.
# it's fine (and convenient) to put the whole list of files in input_state_file_list.
# Filter will just use the first as the base to perturb.

export SCRIPTDIR="%ECF_HOME%/source/%case_name%/main_scripts"

cd ${SCRIPTDIR}

export nens=%nens%
donepath=$(echo %ECF_NAME% | sed 's/%TASK%//g')
its=$(echo %TASK% | sed 's/dep_//g')

if [ ${its} -ne 7 ];then

    sleep $(echo "(${its}*4)" | bc)
else
    ecflow_client --alter=change variable done 0 ${donepath}
    ecflow_client --alter=change variable first_departure null ${donepath}
    ecflow_client --alter=change variable last_departure null ${donepath}
    ecflow_client --alter=change variable end_order null ${donepath}

fi

export CESMEXP='cesm-exp'
export case_name=%case_name%
export CLONESROOT="/users_home/csp/${USER}/${CESMEXP}/${case_name}"
export NTSLOTS=13
export CASEROOT0001="$CLONESROOT/${case_name}_0001"
export TMPROOT="/work/csp/${USER}/CESM2/TMP"$(echo "${case_name}" | tr [:lower:] [:upper:])

source /etc/profile.d/modules.sh
source /data/csp/${USER}/d4o/install/INTEL/source.me

## D4O
module purge
module load cmake/3.17.3
module load intel20.1/20.1.217
module load intel20.1/szip/2.1.1
module load curl/7.70.0
module load impi20.1/19.7.217
#module load anaconda/3.9 # gives access to python 3 PAY ATTENTION IT CAN INTERFERE WITH THE PYTHON SCRIPT USED!
module load dbi/1.643
module load sqlite/3.38.0
module load dbd-sqlite/1.70
module load anaconda/2.7

module load ncl/6.6.2
#module load anaconda/3.8
date
echo "BEGIN FILTER PROCESSES "

export NTSLOTS=13

# export CASEROOT0001="$CLONESROOT/${case_name}_0001"

cd ${CASEROOT0001}
echo $SHELL
echo " xmlquery start"
export scomp=`./xmlquery COMP_ATM      --value`
export CASE=`./xmlquery CASE          --value`
export ensemble_size=`./xmlquery NINST_ATM     --value`
export CAM_DYCORE=`./xmlquery CAM_DYCORE    --value`
export EXEROOT=`./xmlquery EXEROOT       --value`
export RUNDIR=`./xmlquery RUNDIR        --value`
export archive=`./xmlquery DOUT_S_ROOT   --value`
# export TOTALPES=`./xmlquery TOTALPES      --value`

export CONT_RUN=`./xmlquery CONTINUE_RUN  --value`
# when you make a long forecast run without assimilation and then you want to assimilate obs but you do not have
# inflation files then  force one cycle CONT_RUN FALSE
#exportenv CONT_RUN                  FALSE

export CHECK_TIMING=`./xmlquery CHECK_TIMING  --value`
export DATA_ASSIMILATION_CYCLES=`./xmlquery DATA_ASSIMILATION_CYCLES --value`

export nens=%nens%
echo " TMPROOT= $TMPROOT"

export CASESRUNROOT=`echo $RUNDIR | sed -e "s/\/${case_name}_0001\/run//g" `
export MP_DEBUG_NOTIMEOUT=yes
export NUMTASKS_PERNODE='36'

export save_stages_freq="RESTART_TIMES"
export BASEOBSDIR="/users_home/csp/sm09722/BUFR_D4O"
export DIVISION=csp

cd ${TMPROOT}/TS${its}
if [ ! -f run_filter.bash ]; then cp ${TMPROOT}/run_filter.bash . ;fi
rm -f log.txt
chmod 755 run_filter.bash

export workmode='yes'


# bsub  -J  "%case_name%_${its}" < "run_filter.bash" > log.txt
# ecflow_client --label=info "Submitted $(date)"

# bwait -w "ended(*%case_name%_${its})"


# cd ${TMPROOT}
# export line=`grep input_state_file_list input.nml | sed -e "s#[=,'\.]# #g"`
# export line=$(echo ${line} | awk '{print $2}')
# export input_file_list_name=$line

# cp -f --preserve ${TMPROOT}/TS7/${line} ${TMPROOT}/TS${its}/

status=$(ecflow_client --query variable ${donepath}:done)
if [ ${status} -eq 0 ];then
    # ecflow_client --meter /assimilation_2/filter_departure_cleaver_screening/departure done 1
    ecflow_client --alter=change variable done 1 ${donepath}

    ecflow_client --alter=change variable first_departure %TASK% ${donepath}
else 
    ecflow_client --alter=change variable done  $(echo "${status}+1" | bc) ${donepath}
fi

status=$(echo "${status}+1" | bc)
if [ ${status} -eq 13 ];then

    ecflow_client --alter=change variable last_departure %TASK% ${donepath}

fi

order=$(ecflow_client --query variable ${donepath}:end_order)
if [ $order == 'null' ];then 
    order=""
fi

ecflow_client --alter=change variable end_order "${order} ${its}" ${donepath}

ecflow_client --label=info "Finished $(date)"


%include <includes/tail.h>