%include <includes/head.h>

#    DIRHOME=${ECF_HOME}/operation/model1/assimilation ; mkdir -p ${DIRHOME}


echo "${ECF_HOME}/%SUITE%"
date
# %include <includes/tail.h>

###!/bin/bash
#BSUB -n 6
#BSUB -R "span[ptile=6]"
#BSUB -q s_medium
#BSUB -W 4:00
#BSUB -P R000
#BSUB -x 
#BSUB -J create 
#BSUB -I


#===========================================================
# Generate an ensemble of clones of a particular template.
# This is useful if you plan to run an ensemble of CAM si-
# mulation on a small cluster.
#
# Here I'm considering a template that is an hybrid case!
#
#===========================================================
# Experiment name
case_name=%case_name%
CESMEXP="cesm-exp"
USER='mg20022' # gc02720

# Where to copy the clones (Use a clear name for the experiment. The dir name must 
# not appears in the case.template.original)
export clonesroot="/users_home/csp/${USER}/${CESMEXP}/${case_name}"

# CESM2 Directory
mkdir -p ${ECF_HOME}/source/CESM2/case_template
rsync -avzh /work/csp/mg20022/ecflow/source/CESM2/case_template ${ECF_HOME}/source/CESM2/case_template


# Number of clones
nens=%nens%

# DART directory
export dartroot="/work/csp/${USER}/CMCC-DART-RSYNC/CMCC-DART/"


# DA working dir
# tmpdir="%ECF_HOME%/source/CESM2/TMP"$(echo "${case_name}" | tr [:lower:] [:upper:])
tmpdir="/work/csp/${USER}/CESM2/TMP"$(echo "${case_name}" | tr [:lower:] [:upper:])


# Archive (to remove previous files)
# archdir="%ECF_HOME%/source/CESM2/archive"
archdir="/work/csp/${USER}/CESM2/archive"

# Set the obs dir
#baseobsdir="/work/csp/${USER}/observations"
baseobsdir=%baseobsdir%

# Time slots used for the FGAT implementation (note: for every time timeslot you need to have an output from the model!)
nts=13

# Choose your exp template
script_name_original="case.templateradL70.original"

# Chose the input namelist for DART
dartnamelist="input.nml.original.rad"

#TO DO: move the coefficient table in the new distribution
# Where is RTTOV
rttovdir="/users_home/csp/${USER}/rttov123"




# ==============================================================================
# Prepare the environment
# ==============================================================================

# Load the environmental variable (CESMEXP)
#. /users_home/csp/gc02720/.bashrc
source /etc/profile.d/modules.sh

# BASHRC
module load impi20.1/19.7.217 impi20.1/netcdf/C_4.7.4-F_4.5.3_CXX_4.3.1 impi20.1/hdf5/1.12.0 intel20.1/20.1.217 intel20.1/cdo/1.9.8 intel20.1/eccodes/2.17.0 intel20.1/h4cflib/1.3 intel20.1/hdf4/4.2.13 intel20.1/hdf5/1.12.0 intel20.1/magics/3.3.1 intel20.1/nco/4.9.3 intel20.1/ncview/2.1.8 intel20.1/netcdf/C_4.7.4-F_4.5.3_CXX_4.3.1


module load ncl/6.6.2
#module load anaconda/3.8
module load anaconda/2.7

# Daniele env
#conda activate /users_home/csp/dp16116/.conda/envs/py38CS2


# For CMCC-CESM
CIME_MODEL='cesm'

CESMDATAROOT='/data/inputs/CESM'
export CESMDATAROOT

CIME_MACH='zeus'
export CIME_MACH


#perl
export LANGUAGE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LC_TYPE=en_US.UTF-8


# For DART
#CESMDIR='cmcc-cm3.original'
#CESMDIR='cesm2_1_intel20_1'
CESMDIR='cesm2.1.4-rc.08'
#CESMDIR='cesm2.3_beta06'
export CESMDIR
CESMEXP='cesm-exp'
export CESMEXP

#CYLC
#export PATH=$HOME/local/bin:$PATH
#export CYLC_HOME=~/cylc-flow-7.8.6

# PrepCase
export DIVISION=csp

# # >>> conda initialize >>>
# # !! Contents within this block are managed by 'conda init' !!
# __conda_setup="$('/zeus/opt/anaconda/2.7/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
# if [ $? -eq 0 ]; then
#     eval "$__conda_setup"
# else
#     if [ -f "/zeus/opt/anaconda/2.7/etc/profile.d/conda.sh" ]; then
#         . "/zeus/opt/anaconda/2.7/etc/profile.d/conda.sh"
#     else
#         export PATH="/zeus/opt/anaconda/2.7/bin:$PATH"
#     fi
# fi
# unset __conda_setup
# # <<< conda initialize <<<

# conda activate DA


# BASHRC

## Module load
#module load intel19.5/19.5.281
#module load intel19.5/netcdf/C_4.7.2-F_4.5.2_CXX_4.3.1
#module load intel19.5/ncview/2.1.8

#module load intel19.5/cdo/1.9.8
#module load intel19.5/magics/3.3.1
#module load intel19.5/proj/6.2.1
#module load intel19.5/udunits/2.2.26
#module load intel19.5/szip/2.1.1
#module load intel19.5/eccodes/2.12.5

#module load intel19.5/nco/4.8.1
#module load ncl/6.6.2

echo " "
module list
echo " "




# ==============================================================================
# standard commands:
#
# Make sure that this script is using standard system commands
# instead of aliases defined by the user.
# If the standard commands are not in the location listed below,
# change the 'set' commands to use them.
# The verbose (-v) argument has been separated from these command definitions
# because these commands may not accept it on some systems.  On those systems
# set VERBOSE = ''
# ==============================================================================

VERBOSE='-v'
MOVE='/usr/bin/mv'
COPY='/usr/bin/cp --preserve=timestamps'
LINK='/usr/bin/ln -s'
LIST='/usr/bin/ls'
REMOVE='/usr/bin/rm -f'

#maindir=`pwd`
maindir="%ECF_HOME%/source/%case_name%/main_scripts"

echo -e "\n START EXPERIMENT CREATION \n"

# Parameters check
if [ ${nts} -eq 13 ];then
     tcentral=7
  else
     echo " Time slots division not supported yet "
     exit 222
fi

if [ ! -d "%ECF_HOME%/source/%case_name%/" ]; then
#   cp -r --preserve "%ECF_HOME%/source/d4osystem" "%ECF_HOME%/source/%case_name%"
  cp -r --preserve %ECF_CLONE%/source/d4osystem "%ECF_HOME%/source/%case_name%"

fi

cd "%ECF_HOME%/source/%case_name%/main_scripts"

script_name="case.template"
${COPY} ${dartnamelist} input.nml

sed -i "s/NUM_INSTANCE_TEMPLATE/${nens}/g" input.nml

echo -e "\n Remove dir of a previus experiment with the same name if it exists!\n"
if [ -d ${archdir}/${case_name} ]; then
   ${REMOVE} -fr ${archdir}/${case_name}
fi 
if [ -d ${tmpdir} ]; then
   ${REMOVE} -fr ${tmpdir}
fi 
if [ -d ${clonesroot} ]; then
   ${REMOVE} -fr ${clonesroot}
   ${REMOVE} -fr %ECF_HOME%/source/CESM2/${case_name}_*
fi

# if forecast active in the previous experiment
dirff=/work/csp/${USER}/cesm-exp/${case_name}-forecast
if [ -d ${dirff} ]; then
   ${REMOVE} -fr ${dirff}
   ${REMOVE} -fr %ECF_HOME%/source/CESM2/${case_name}_f_*
fi



# set the obs dir
${COPY} cases_assimilate_template.csh cases_assimilate.csh
sed -i "s@TEMPLATE_OBS_EXP@${baseobsdir}@g" cases_assimilate.csh




containerdir=`echo ${clonesroot} | cut -d'/' -f6`
${COPY} ../case_archive/${script_name_original} ../case_archive/${script_name}
sed -i "s/TEMPLATE_DIR_EXP/${containerdir}/g" ../case_archive/${script_name}


#===========================================================
#
#===========================================================
# Create the first case

echo -e "Phase 1 (start): creation of a new case from template ...\n"

csh ../case_archive/${script_name} 



case=`awk '/setenv case /{print $NF}' ../case_archive/$script_name`
cesmroot=`awk '/setenv cesmroot/{print $NF}' ../case_archive/$script_name | \
          sed "s/\\\${USER}/$USER/g;\
               s/\\\${CESMDIR}/$CESMDIR/g"`
caseroot=`awk '/setenv caseroot/{print $NF}' ../case_archive/$script_name| \
          sed "s/\\\${USER}/$USER/g;\
               s/\\\${CESMEXP}/$CESMEXP/g;\
               s/\\\${case}/$case/g"`


echo -e "Template case created"
echo -e "Phase 1 (end)\n"


#===========================================================
#
#===========================================================
# Clone the case nens time

echo -e "Phase 2 (start): creation of the clones ...\n"

inst=1
while [ $inst -le $nens ];do

   echo -e "member $inst\n"

   # Following the CESM strategy for 'inst_string'
   inst_string=`printf _%%04d $inst`
   
   new_case="$clonesroot/$case_name$inst_string"
   # Create the clone 
   ${cesmroot}/cime/scripts/create_clone \
      --case     $new_case          \
      --clone    $caseroot          \

   # Modify the I.C. for each clone, then  build
   # Remember that each job contain ONLY one member
   cd $new_case
   
   sed -i "s/_0001/$inst_string/g" user_nl_cam_0001  
   ${MOVE} user_nl_cam_0001 user_nl_cam
   sed -i "s/_0001/$inst_string/g" user_nl_cice_0001  
   ${MOVE} user_nl_cice_0001 user_nl_cice
   ${MOVE} user_nl_clm_0001 user_nl_clm
   
   RUNDIR=`./xmlquery RUNDIR       --value`
   refcase=`./xmlquery RUN_REFCASE --value`
   stagedir=`./xmlquery RUN_REFDIR --value`
   refdate=`./xmlquery RUN_REFDATE --value`
   reftod=`./xmlquery RUN_REFTOD   --value`
   COMP_ROF=`./xmlquery COMP_ROF   --value`   
   init_time="${refdate}-$reftod"
   
   echo "finidat='${refcase}${inst_string}.clm2.r.${init_time}.nc'">> user_nl_clm
   echo "finidat_rtm='${refcase}${inst_string}.mosart.r.${init_time}.nc'">> user_nl_mosart
   sed -i "s/ICE_IC_TEMPLATE/${refcase}${inst_string}.cice.r.${init_time}.nc/g" user_nl_cice
   sed -i "s/NCDATA_TEMPLATE/cam_initial${inst_string}.nc/g" user_nl_cam
 
#   ./preview_namelists || exit 75

   echo "Staging initial files for instance $inst of $nens"

   cd $RUNDIR

   ${LINK} -f ${stagedir}/${refcase}${inst_string}.clm2.r.${init_time}.nc  .
   ${LINK} -f ${stagedir}/${refcase}${inst_string}.cice.r.${init_time}.nc  .
   ${LINK} -f ${stagedir}/${refcase}${inst_string}.cam.i.${init_time}.nc   cam_initial${inst_string}.nc
   ${LINK} -f ${stagedir}/${refcase}${inst_string}.mosart.r.${init_time}.nc .
   
   # Build the case

   cd $new_case
   echo ''
   echo 'Copy executable'
   echo ''

   ./xmlchange --file env_build.xml --id BUILD_COMPLETE --val TRUE
   ./xmlchange --file env_build.xml --id BUILD_STATUS --val 0
   cp "%ECF_HOME%/source/CESM2/case_template/bld/cesm.exe"  ${RUNDIR}/../bld/cesm.exe


   inst=$(echo "${inst}+1" | bc)
done

echo -e "Phase 2 (end): \n"

echo -e "Copy DART necessary files  in the tmp working dir"
mkdir $tmpdir
${MOVE} ${maindir}/input.nml $tmpdir/.
${COPY} $tmpdir/input.nml $tmpdir/input.nml.original
${COPY} $dartroot/d4o/flattened/cam-fv/filter.dir/filter $tmpdir/.
${COPY} $dartroot/d4o/flattened/cam-fv/fill_inflation_restart.dir/fill_inflation_restart  $tmpdir/.

${COPY} $dartroot/assimilation_code/programs/gen_sampling_err_table/work/sampling_error_correction_table.nc $tmpdir/.

echo " Copy RTTOV db file"
${COPY} $dartroot/observations/forward_operators/rttov_sensor_db.csv $tmpdir/.
${COPY} ${rttovdir}/rtcoef_rttov12/rttov7pred54L/rtcoef_eos_2_amsua.dat  $tmpdir/.

# Inside the TMP dir we need to create time-slots dir that will contain copy of the filter and links to the other needed files
ts=1
while [ $ts -le $nts ];do

   echo -e "time slot creation: TS= $ts"
   tsname="TS$ts"
   mkdir $tmpdir/$tsname

   # Copy and link all the necessary files
   ${COPY} $tmpdir/input.nml $tmpdir/${tsname}/input.nml 

   # Copy filter and fill_inflation_restart
   ${COPY} $dartroot/d4o/flattened/cam-fv/filter.dir/filter $tmpdir/$tsname/.
   ${COPY} $dartroot/d4o/flattened/cam-fv/fill_inflation_restart.dir/fill_inflation_restart $tmpdir/$tsname/.
   
   # Link support files and tables for filter
   ${COPY}  $dartroot/assimilation_code/programs/gen_sampling_err_table/work/sampling_error_correction_table.nc    $tmpdir/$tsname/.    
   ${COPY}  $dartroot/observations/forward_operators/rttov_sensor_db.csv    $tmpdir/$tsname/.    
   ${COPY}  ${rttovdir}/rtcoef_rttov12/rttov7pred54L/rtcoef_eos_2_amsua.dat    $tmpdir/$tsname/.    

   ts=$(echo "${ts}+1" | bc)
done



echo -e "\n Modify case_assimilate.sh using the right number of nodes! TO DO!!!!\n"


echo -e "\n END EXPERIMENT CREATION \n"

%include <includes/tail.h>