#!/bin/ksh  
set -e          # stop the shell on first error
set -u          # fail when using an undefined variable
set -x          # echo script lines as they are executed
set -o pipefail # fail if last(rightmost) command exits with a non-zero status
 
# Defines the variables that are needed for any communication with ECF
export ECF_PORT=3142    # The server port number
export ECF_HOST=login1    # The host name where the server is running
export ECF_NAME=/spreads_ui/assimilation_experiment/create_template    # The name of this current task
export ECF_PASS=PGsrwY.Z    # A unique password, used for job validation & zombie detection
export ECF_TRYNO=1  # Current try number of the task
export ECF_RID=$$             # record the process id. Also used for zombie detection
# export NO_ECF=1             # uncomment to run as a standalone task on the command line
 
# Define the path where to find ecflow_client
# make sure client and server use the *same* version.
# Important when there are multiple versions of ecFlow
export PATH=/work/csp/mg20022/.conda/envs/ecflow/bin:$PATH
 
# Tell ecFlow we have started
ecflow_client --init=$$
 
 
# Define a error handler
ERROR() {
   set +e                      # Clear -e flag, so we don't fail
   wait                        # wait for background process to stop
   ecflow_client --abort=trap  # Notify ecFlow that something went wrong, using 'trap' as the reason
   trap 0                      # Remove the trap
   exit 0                      # End the script cleanly, server monitors child, an exit 1, will cause another abort and zombie
}
 
 
# Trap any calls to exit and errors caught by the -e flag
trap ERROR 0
 
 
# Trap any signal that may cause the script to fail
trap '{ echo "Killed by a signal"; ERROR ; }' 1 2 3 4 5 6 7 8 10 12 13 15


cp  /work/csp/mg20022/ecflow/d4osystemecf.def /work/csp/mg20022/ecflow/d4osystemecf_test2.def



# for i in $(seq -f "%04g" 1 3);do
#   echo $i
# done
echo ""
echo "----- END TASK ---"
echo ""
ecflow_client --label=Info "OK... 20230119  09:34"
wait                      # wait for background process to stop
ecflow_client --complete  # Notify ecFlow of a normal end
trap 0                    # Remove all traps
exit 0  